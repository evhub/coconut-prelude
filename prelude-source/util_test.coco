# Imports:
from prelude import *  # type: ignore


# Tests:
def test_FunctionApplication():
    assert (+) `of` 1 `of` 2 == 3
    assert of((x, y, z) -> (x, y, z), 1, 2) `of` 3 == (1, 2, 3)
    assert of((x, y) -> (x, y), y=2) `of` 1 == (1, 2)
    assert curry(+)(1)(2) == 3 == uncurry((+)$)(1, 2)
    assert uncurry(curry(/))(6, 2) == 3

def test_definesBind():
    @definesBind
    data FunctionMonad(func):
        @staticmethod
        def __pure__(x: Ta) -> FunctionMonad =
            FunctionMonad(e -> x)

        def __bind__(x: FunctionMonad, f: Ta -> FunctionMonad) -> FunctionMonad =
            FunctionMonad(r -> r |> x |> f <| r)

        def __call__(FunctionMonad(func), *args, **kwargs) =
            func(*args, **kwargs)

    assert 8 == FunctionMonad((+)$(1)) |> fmap$((*)$(2)) <| 3
    assert 6 == FunctionMonad(curry(+)) |> join <| 3
