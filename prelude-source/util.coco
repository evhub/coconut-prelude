# Imports:
from prelude.typevars import *  # type: ignore


# Function application:
if TYPE_CHECKING:
    @T.overload  # type: ignore
    def \of(func: Ta -> Tb, _x: Ta) -> Tb:
        ...
    @T.overload
    def \of(func: (Ta, Tb) -> Tc, _x: Ta) -> Tb -> Tc:
        ...
    @T.overload
    def \of(func: (Ta, Tb, Tc) -> Td, _x: Ta) -> (Tb, Tc) -> Td:
        ...
    @T.overload
    def \of(func: -> Tb, _x: Ta) -> T.Any:
        ...
    @T.overload
    def \of(func: (Ta, Tb) -> Tc, _x: Ta, _y: Tb) -> Tc:
        ...
    @T.overload
    def \of(func: (Ta, Tb, Tc) -> Td, _x: Ta, _y: Tb) -> Tc -> Td:
        ...
    @T.overload
    def \of(func: (Ta, Tb, Tc) -> Td, _x: Ta, _y: Tb, _z: Tc) -> Td:
        ...
    @T.overload
    def \of(func: -> T.Any, *args: T.Any, **kwargs: T.Any) -> T.Any:
        ...
    def \of(func, *args, **kwargs):
        ...
else:
    def \of(func, *args, **kwargs):
        """
        of = ($)
        -- of(func, *args, **kwargs) attempts to call func(*args, **kwargs),
        --  but in case of TypeError curries func$(*args, **kwargs) instead,
        --  as in Haskell function application (see also curry, uncurry)
        """
        f = func$(*args, **kwargs)
        try:
            return f()
        except TypeError, MatchError:
            return f

def curry(func) =
    """
    -- curry a Python-style multi-place function into
    --  a Haskell-style function that returns a function
    --  (see also curry_tuple for functions of tuples)
    """
    of$(func)

def uncurry(func) =
    """
    -- uncurry a Haskell-style function that returns a function
    --  into a Python-style multi-place function
    --  (see also uncurry_tuple for functions of tuples)
    """
    (*args) -> reduce(of, args, func)


# Deriving:
def derivingOrd(*valueConstructors: TType) -> None:
    """
    The expression
        derivingOrd(valueConstructor1, valueConstructor2, ...)
    is equivalent to stating that for some data type defined as
        data dataType = valueConstructor1 ... | valueConstructor2 ... | ...
    we should add
        deriving Ord
    """
    if TYPE_CHECKING: return

    ind = valueConstructors.index..type
    for valCon in valueConstructors:

        # Ord
        def valCon.__lt__(x, y) =
            tuple.__lt__(x, y) if type(x) is type(y) else ind(x) < ind(y)
        def valCon.__le__(x, y) =
            tuple.__le__(x, y) if type(x) is type(y) else ind(x) <= ind(y)
        def valCon.__ge__(x, y) =
            tuple.__ge__(x, y) if type(x) is type(y) else ind(x) >= ind(y)
        def valCon.__gt__(x, y) =
            tuple.__gt__(x, y) if type(x) is type(y) else ind(x) > ind(y)

def derivingBoundedEnum(*valueConstructors: TType) -> None:
    """
    The expression
        derivingBoundedEnum(valueConstructor1, valueConstructor2, ...)
    is equivalent to stating that for some data type defined as
        data dataType = valueConstructor1 ... | valueConstructor2 ... | ...
    we should add
        deriving (Bounded, Enum)
    """
    if TYPE_CHECKING: return

    ind = valueConstructors.index..type
    for valCon in valueConstructors:

        # Bounded
        def valCon.__minBound__(self) =
            valueConstructors[0]()
        def valCon.__maxBound__(self) =
            valueConstructors[-1]()

        # Enum
        def valCon.__int__(x) = ind(x)
        def valCon.__add__(x, y) =
            valueConstructors[ind(x) + y]() if isinstance(y, int) else tuple.__add__(x, y)
        def valCon.__radd__(x, y) = x + y
        def valCon.__sub__(x, y) =
            valueConstructors[ind(x) - y]() if isinstance(y, int) else tuple.__sub__(x, y)


# Monads:
def definesBind(dataType: TType) -> TType:
    """
    Decorator to declare that a data type defines __bind__
    instead of __join__. Will also create an __fmap__ method
    if none exists, though then a __pure__ method is required.
    """
    if TYPE_CHECKING: return dataType

    if not dataType `hasattr` "__fmap__":
        if not dataType `hasattr` "__pure__":
            raise TypeError("data types which define __bind__ must define either __fmap__ or __pure__")
        def dataType.__fmap__(self, func) =
            self.__bind__(x -> dataType.__pure__(func(x)))

    if dataType `hasattr` "__join__":
        raise TypeError("data types which define __bind__ cannot define __join__")
    def dataType.__join__(self) =
        self.__bind__(x -> x)

    return dataType

def definesReturn(dataType: TType) -> TType:
    """
    A simple decorator to set __pure__ equal to __return__.
    If used with definesBind, definesReturn must be applied
    first (i.e. be a more inner decorator).
    """
    if dataType `hasattr` "__pure__":
        raise TypeError("data types which define __return__ cannot define __pure__")
    dataType.__pure__ = dataType.__return__
    return dataType
